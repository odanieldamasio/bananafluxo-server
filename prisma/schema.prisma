// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// Enums
// =================================

enum UserRole {
  ADMIN
  USER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum InstallmentStatus {
  PENDING
  PAID
  LATE
}

// =================================
// Models
// =================================

model User {
  id           String        @id @default(uuid())
  name         String
  username     String        @unique
  email        String        @unique
  passwordHash String
  role         UserRole?     @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Transaction  Transaction[]

  @@map("users")
}

model Transaction {
  id               String          @id @default(uuid())
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  type             TransactionType
  description      String?
  totalAmount      Decimal         @db.Decimal(10, 2)
  installments     Int             @default(1)
  createdAt        DateTime        @default(now())
  installmentsList Installment[]

  deletedAt DateTime?

  @@map("transactions")
}

model Installment {
  id                String            @id @default(uuid())
  transactionId     String
  transaction       Transaction       @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Decimal           @db.Decimal(10, 2)
  dueDate           DateTime
  status            InstallmentStatus @default(PENDING)
  paidAt            DateTime?

  deletedAt DateTime?

  @@map("installments")
}
